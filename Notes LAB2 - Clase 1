-----------------------------------------------------------------------------------------
Clase 1 - 
Variables: Tipo de dato - Nombre - Asignaciòn de valor

                int         var1     =0;
                
                -Se pueden declarar varias variables a la vez:
                int var1,var2,var3;
                -Las palabras reservadas no pueden usarse p/ declarar variables.
                -Tipos de datos:
                  -bool - True or false.
                  -int - Nùmeros enteros (short = 2bytes / long = 4bytes / unsigned = enteros de 0 a 65.535)
                  -char - Valores entre 0 a 265, que representan un caracter de la tabla ASCII
                  -float
                  -double

Muestra de contenido_ Usamos la librerìa <iostream>, la cuàl contiene la instrucciòn "cout<<", usada para mostrar cosas en la pantalla.

"using namespace std" = //Nota: std = estàndar, par aindicar que se usa una librerìa estandar, cosa de no tener que poner "cout::std"-

Libreria: conjunto de funciones/tipos de datos/etc.

Operadores> + - * % ++ -- precrementadores y postcrementadores.

Operadores de asignaciòn : = -= += *= /=

Operadores de comparaciòn : 0 >= <= == !=

Operadores lògicos: &&  ||  !

Operadores sizeof < nos da el tamaño en bytes ocupados por un tipo de dato o variable

Estructura de desiciòn: 

    -if (or if-else)
    -switches > los flows, las estructuras enteras, no se pueden comparar en un switch; 
    
Estructuras Cìclicas:
    
    -For
    -While


Cadenas:
-Son vectores de char(caràcter de la tabla ASCII), que nos permite guardar texto.
-Tiene un ìndice> indica la posiciòn de un caràcter-
-Para indicar el fin de cadena se usa /0. Nota /n = salto de lìnea /a = beep /" = muestra la comilla en pantalla
-El ìndice arranca en CERO.

EJEMPLO: 
Muestra todo el abecedario en minùsculas:

int main()
{
char a='a'; //para que char sea la "a", hay que indicar que a = el nùmero de la tabla ASCII que representa el caràcter "a" 
        //ò indicar con comillas simples que tiene que ser = al càracter 'a'
while(a<='z')
{
  cout<<a<<endl;
  a++;
}
}

ò

int main()
{
int a='a'; //para que char sea la "a", hay que indicar que a = el nùmero de la tabla ASCII que representa el caràcter "a" 
        //ò indicar con comillas simples que tiene que ser = al càracter 'a'
while(a<='z')
{
  //hacer un casteo - convierte el entero a char(en este caso especìfico)
  cout<<(char)a<<endl;
  a++;
}
}

cin.getline = obtiene un texto por pantalla, y la cantidad de caràcteres.

cin.get() ò cin>>  se usa para ingresae un caràcter //diferencia entre ambos = cin reconoce espacio como fin de ingreso.
cin.ignore() limpia el bùffer del teclado.


Vectores:
- Usan misma lògica que las cadenas 
- Tienen ìndice 
- diferencia con cadenas: los char no tienen tratamiento especial con los /0; los cout de los vectores indican
la direcciòn de memoria. Detràs de todo es un puntero.

FUNCIONES: En las funciones, los vectores se pasan como punteros (un vector es una direcciòn de memoria); y se reciben còmo puntero

EJEMPLO:
int sumaVector(int *v, int tam) //hay que pasar tambièn el tamaño, para saber còmo frenar el vector
int result =0;
for(int i=0; i<tam;i++)
{
result +=[i]
}

Diferencia entre valor y referencia:
-valor es una copia interna dentro de la funciòn (por lo que se modifica la copia dentro de la funciòn, y no se modifica el
valor original); si se pasa por referencia se modifica el valor otiginal, ya que pasamos la direcciòn de memoria que contiene
el valor.


MATRICES:

  -ìndice doble (ya que es bidimensional, fila y columna).
  -Siempre va primero FILA y luego COLUMNA
  -Para pasar a la funciòn, se envìa el tamaño de la fila y columna de la matriz.
  -Si se modifica un elemento dentro de la matriz, en la funciòn tambièn se ve modificado.
  
REVISAR PUNTEROS<<<<

ESTRUCTURAS:

-Agrupaciòn de datos y de tipos de datos, a modo de variable, a modo de tipo de dato.
-los struct deben ser utilizadas de la misma manera que las variables primitivas: declaro tipo de dato, y el nombre de la variable
-El acceso a los campos se realiza mediante el punto:

ejemplo

int numero;
tPersona persona;

MostrarPersona(persona)

para pasar la struct por valor o por referencia?

- en el caso que tengamos que mostrar datos de la estructura se pasa por valor(el valor hace una 
copia exacta dentro de la funcion),
- en el caso que tengamos que modificar datos de la estructura se pasa por referencia(el valor modifica directamente los datos),
se pasa por puntero, y se recive con &.
-Se usa con flecha sòlo cuando la estructura es con puntero.
Diferencia flecha, ampersan, asterisco y corchete.
ampersan: se usa cuando estàs llamando a la funciòn.
asterisco: se usa cuando estàs pasando la direcciòn de memoria (para poder mostrarlo)
flecha: se usa cuando es un puntero dentro de la funciòn, sirve para mostrar el valor que alberga la dirección de memoria (el puntero).
corchete: ???????????? 
REPASAR ESTOS ULTIMOS DOS PUNTOS.



Revisar portales: C++ con clase.
Udemy (revisar contenido de curso)
Còdigo facilito y Jesùs Conde en youtube (son detallistas pero densos[??)
kudvenkat en youtube > buenos tutoriales de sql, y .net
.netcore >version opensource de .net


CODEBLOCKS MINGW <<< Versiòn de codeblocks a descargar

-----------------------------------------------------------------------------------------
